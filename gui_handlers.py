import os
import sys
import pathlib
import hashlib
import textwrap
from zipfile import ZipFile, ZIP_DEFLATED
import version
import data
import wx
import wx.adv
from loguetools import dump, common
from loguetools.explode import explode
from loguetools.translate import translate
from loguetools_gui_autogenerated import MainFrame


def print_sep():
    print("__________________________________________________________________________\n")


def resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)


class MyFrame(MainFrame): 
    def __init__(self, parent):
        super().__init__(parent)
        # Application icon
        self.SetIcon(wx.Icon(resource_path(u"icons/cog.ico")))

        # Direct stdout to TextCtrlOut
        sys.stdout = self.m_textCtrlOut

        # Populate toolbar with tool buttons and connect them up; do this here because we need to wrap the icon paths
        self.tool_load = self.toolbar.AddLabelTool(
            wx.ID_OPEN, u"tool",
            wx.Bitmap(resource_path(u"icons/file_manager.ico"), wx.BITMAP_TYPE_ANY),
            wx.NullBitmap, wx.ITEM_NORMAL, u"Open Pack",
            u"Open Pack - Open a Patch library", None)
        self.tool_translate = self.toolbar.AddLabelTool(
            wx.ID_CONVERT, u"translate",
            wx.Bitmap(resource_path(u"icons/convert_gray_to_color.ico"), wx.BITMAP_TYPE_ANY),
            wx.NullBitmap, wx.ITEM_NORMAL, u"Translate Pack",
            u"Translate Pack - Convert a minilogue pack to work on the minilogue xd", None)
        self.tool_explode = self.toolbar.AddLabelTool(
            wx.ID_SAVE, u"tool",
            wx.Bitmap(resource_path(u"icons/document_tree.ico"), wx.BITMAP_TYPE_ANY),
            wx.NullBitmap, wx.ITEM_NORMAL, u"Explode",
            u"Explode - Save all programs/patches to separate files", None)
        self.tool_dump = self.toolbar.AddLabelTool(
            wx.ID_VIEW_DETAILS, u"tool",
            wx.Bitmap(resource_path(u"icons/box_open.ico"), wx.BITMAP_TYPE_ANY),
            wx.NullBitmap, wx.ITEM_NORMAL, u"Dump",
            u"Dump - Display program/patch content", None)
        self.tool_exit = self.toolbar.AddLabelTool(
            wx.ID_EXIT, u"tool",
            wx.Bitmap(resource_path(u"icons/door_in.ico"), wx.BITMAP_TYPE_ANY),
            wx.NullBitmap, wx.ITEM_NORMAL, u"Exit", u"Exit", None)
        self.toolbar.Realize()
        # Connect Events
        self.Bind(wx.EVT_TOOL, self.OnLoadFile, id=self.tool_load.GetId())
        self.Bind(wx.EVT_TOOL, self.OnTranslate, id=self.tool_translate.GetId())
        self.Bind(wx.EVT_TOOL, self.OnExplode, id=self.tool_explode.GetId())
        self.Bind(wx.EVT_TOOL, self.OnDump, id=self.tool_dump.GetId())
        self.Bind(wx.EVT_TOOL, self.OnExit, id=self.tool_exit.GetId())

        self.toolbar.EnableTool(wx.ID_CONVERT, False)       # translate
        self.toolbar.EnableTool(wx.ID_SAVE, False)          # explode
        self.toolbar.EnableTool(wx.ID_VIEW_DETAILS, False)  # dump

        self.logue_type = None

    def OnLoadFile(self, event):
        """Load/Save/etc buttons (in controls area)
        """
        # otherwise ask the user what new file to open
        with wx.FileDialog(
            self, "Choose a file",
            wildcard="".join([
                "patches|",
                "*.mnlgxdlib;*.mnlgxdprog;",
                "*.mnlgpreset;*.mnlgprog;",
                "*.prlglib;*.prlgprog"
            ]),
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST
        ) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind

            # Proceed loading the file chosen by the user
            pathname = fileDialog.GetPath()
            try:
                with open(pathname, 'r') as fileobj:
                    self.LoadData(fileobj)
                    self.file = fileobj.name
                    self.toolbar.EnableTool(wx.ID_CONVERT, False)
                    self.toolbar.EnableTool(wx.ID_SAVE, False)
                    self.toolbar.EnableTool(wx.ID_VIEW_DETAILS, False)
                    self.logue_type, self.is_a_collection = \
                        common.file_type(pathlib.Path(self.file).suffix)
                    if self.is_a_collection:
                        self.toolbar.EnableTool(wx.ID_SAVE, True)
                    if self.logue_type == "og":
                        self.toolbar.EnableTool(wx.ID_CONVERT, True)
            except IOError:
                wx.LogError("Cannot open file '%s'." % pathname)
        self.statusBar.SetStatusText(f"Loaded {self.file}")

    def LoadData(self, fileobj):
        self.zipobj = ZipFile(fileobj.name, "r", compression=ZIP_DEFLATED, compresslevel=9)
        self.proglist = common.zip_progbins(self.zipobj)
        lc = self.listCtrl
        lc.ClearAll()
        lc.AppendColumn("id")
        lc.AppendColumn("name")
        lc.AppendColumn("md5:4")
        lc.SetColumnWidth(0, 40)
        lc.SetColumnWidth(1, 200)
        lc.SetColumnWidth(2, 50)
        for i, p in enumerate(self.proglist):
            patchdata = self.zipobj.read(p)
            prgname = common.program_name(patchdata)
            hash = hashlib.md5(patchdata).hexdigest()
            lc.Append([i+1, prgname, hash[:4]])

    def OnPatchSelected(self, event):
        if self.logue_type in {"og", "xd"}:
            self.toolbar.EnableTool(wx.ID_VIEW_DETAILS, True)

    def OnPatchDeselected(self, event):
        self.toolbar.EnableTool(wx.ID_VIEW_DETAILS, False)

    def OnDump(self, event):
        item = self.listCtrl.GetFocusedItem()
        prgname = self.listCtrl.GetItemText(item, col=1)
        print(f"{prgname}")
        patchdata = self.zipobj.read(self.proglist[item])
        dump.print_patch(patchdata)
        print_sep()

    def OnTranslate(self, event):
        unskip_init = self.m_checkBox_inits.GetValue()
        translate(self.file, None, None, None, unskip_init)

    def OnExplode(self, event):
        append_md5_4 = self.m_checkBox_md5.GetValue()
        append_version = self.m_checkBox_version.GetValue()
        unskip_init = self.m_checkBox_inits.GetValue()
        explode(self.file, None, None, append_md5_4, append_version, unskip_init)

    def OnExit(self, event):
        """Close the frame, terminating the application."""
        self.Close(True)

    def OnAbout(self, event):
        aboutInfo = wx.adv.AboutDialogInfo()
        aboutInfo.SetName("loguetools")
        aboutInfo.SetVersion(version.__version__)
        aboutInfo.SetDescription(
            textwrap.dedent("""
                Tools for Korg minilogue, prologue
                and minilogue xd program banks
                Author: Gary Ruben
                """)
        )
        aboutInfo.SetCopyright("3-clause BSD licence")
        aboutInfo.SetWebSite("https://github.com/gazzar/loguetools")
        wx.adv.AboutBox(aboutInfo)
